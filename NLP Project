#!/usr/bin/env python
# coding: utf-8

# In[1]:


import os
import pandas as pd


# Define the folder path
folder_path = 'C:/Users/DELL/Desktop/nlp project/review_polarity/txt_sentoken/pos'
folder_path2 = 'C:/Users/DELL/Desktop/nlp project/review_polarity/txt_sentoken/neg'

# Define an empty list to store the file contents
file_contents = []
file_value = []

# Loop through all files in the folder
for filename in os.listdir(folder_path):
    if filename.endswith('.txt'):
        # Open the file and read its content
        with open(os.path.join(folder_path, filename), 'r') as file:
            content = file.read()
            # Append the content to the list
            file_contents.append(content)
            file_value.append(1)
            
            
for filename in os.listdir(folder_path2):
    if filename.endswith('.txt'):
        # Open the file and read its content
        with open(os.path.join(folder_path2, filename), 'r') as file:
            content = file.read()
            # Append the content to the list
            file_contents.append(content)
            file_value.append(0)            

# Create a data frame with the file contents
df = pd.DataFrame({'Document': file_contents, 'review': file_value})


# In[2]:


print(df.head())


# In[3]:


print(df.tail())


# In[6]:


import numpy as np 
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.feature_extraction.text import TfidfVectorizer
import nltk
from nltk.stem import WordNetLemmatizer
from nltk.stem import PorterStemmer
import re
import string
from sklearn.naive_bayes import MultinomialNB
from sklearn import metrics
import nltk
stopwords = nltk.corpus.stopwords.words('english')
lemmatizer = WordNetLemmatizer()
from textblob import Word
import matplotlib.pyplot as plt

X=df['Document']
Xnew=[]
##preprocessing
for i in range(0, len(X)):
    review = re.sub('[^a-zA-Z]', ' ',X[i])
    review = review.lower()
    review = review.split()
    stemmer = PorterStemmer()
    review = [stemmer.stem(word) for word in review if not word in set(stopwords)]
    #review = ' '.join(review)
    review = [lemmatizer.lemmatize(word) for word in review]
    review = ' '.join(review)
    Xnew.append(review)
print(Xnew[0])


# In[8]:


from sklearn import model_selection, preprocessing, linear_model, naive_bayes, metrics, svm
from sklearn.model_selection import train_test_split
Y=df['review']
x_train, x_test, y_train, y_test = model_selection.train_test_split(Xnew,Y,test_size=0.20,random_state=0)


# In[9]:

results = {}
tf_idf = TfidfVectorizer()
tf_idf.fit(Xnew)
#applying tf idf to training data
X_train_tf = tf_idf.fit_transform(x_train)

#transforming test data into tf-idf matrix
X_test_tf = tf_idf.transform(x_test)

X_train_tf.data


# In[10]:


from sklearn.metrics import accuracy_score
def train_model(classifier,X_train ,y_train, X_test,y_test):
    # fit the training dataset on the classifier
    classifier.fit(X_train, y_train)
    # predict the labels on validation dataset
    return accuracy_score(y_test, classifier.predict(X_test))


# In[11]:


#Naive Bayes Classifier
accuracy = train_model(naive_bayes.MultinomialNB(alpha=0.2), X_train_tf, y_train,X_test_tf,y_test)
print(accuracy)
results["naive_bayes"] = accuracy


# In[12]:


#Logistic Regression Classifier
accuracy = train_model(linear_model.LogisticRegression(), X_train_tf, y_train,X_test_tf,y_test)
print(accuracy)
results["LogisticRegression"] = accuracy

# In[13]:


#SVM Classifier
accuracy = train_model(svm.SVC(), X_train_tf, y_train,X_test_tf,y_test)
print(accuracy)
results["svm"] = accuracy

# In[14]:



plt.bar(results.keys(), results.values())
plt.xlabel('Classifier')
plt.ylabel('Accuracy')
plt.title('Sentiment Analysis Classifier Accuracies')
plt.show()




test=['bad film']

review = re.sub('[^a-zA-Z]', ' ', test[0])
review = review.lower()
review = review.split()
test_processed =[ ' '.join(review)]
test_input = tf_idf.transform(test_processed)


#logistic regression
clf = linear_model.LogisticRegression() 
#Train the model using the training sets
clf.fit(X_train_tf, y_train)
#Predict the response for test dataset
res = clf.predict(test_input)
#print(accuracy)
if res==1:
    print("Good Review")
elif res==0:
    print("Bad Review")


# In[ ]:




